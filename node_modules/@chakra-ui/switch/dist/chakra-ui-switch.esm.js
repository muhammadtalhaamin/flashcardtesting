import { useCheckbox } from '@chakra-ui/checkbox';
import { forwardRef, useMultiStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';
import { cx, dataAttr, __DEV__ } from '@chakra-ui/utils';
import * as React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const Switch = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Switch", props);
  const {
    spacing = "0.5rem",
    children,
    ...ownProps
  } = omitThemingProps(props);
  const {
    state,
    getInputProps,
    getCheckboxProps,
    getRootProps,
    getLabelProps
  } = useCheckbox(ownProps);
  const containerStyles = React.useMemo(() => ({
    display: "inline-block",
    position: "relative",
    verticalAlign: "middle",
    lineHeight: "normal",
    ...styles.container
  }), [styles.container]);
  const trackStyles = React.useMemo(() => ({
    display: "inline-flex",
    flexShrink: 0,
    justifyContent: "flex-start",
    boxSizing: "content-box",
    cursor: "pointer",
    ...styles.track
  }), [styles.track]);
  const labelStyles = React.useMemo(() => ({
    userSelect: "none",
    marginStart: spacing,
    ...styles.label
  }), [spacing, styles.label]);
  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, getRootProps(), {
    className: cx("chakra-switch", props.className),
    __css: containerStyles
  }), /*#__PURE__*/React.createElement("input", _extends({
    className: "chakra-switch__input"
  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(chakra.span, _extends({}, getCheckboxProps(), {
    className: "chakra-switch__track",
    __css: trackStyles
  }), /*#__PURE__*/React.createElement(chakra.span, {
    __css: styles.thumb,
    className: "chakra-switch__thumb",
    "data-checked": dataAttr(state.isChecked),
    "data-hover": dataAttr(state.isHovered)
  })), children && /*#__PURE__*/React.createElement(chakra.span, _extends({
    className: "chakra-switch__label"
  }, getLabelProps(), {
    __css: labelStyles
  }), children));
});

if (__DEV__) {
  Switch.displayName = "Switch";
}

export { Switch };

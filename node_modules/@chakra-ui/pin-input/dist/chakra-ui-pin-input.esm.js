import { useStyleConfig, omitThemingProps, forwardRef, chakra } from '@chakra-ui/system';
import { focus, ariaAttr, callAllHandlers, __DEV__, cx } from '@chakra-ui/utils';
import { createContext, mergeRefs, getValidChildren } from '@chakra-ui/react-utils';
import * as React from 'react';
import { createDescendantContext } from '@chakra-ui/descendant';
import { useId, useControllableState } from '@chakra-ui/hooks';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/* -------------------------------------------------------------------------------------------------
 * Create context to track descendants and their indices
 * -----------------------------------------------------------------------------------------------*/

const [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = createDescendantContext();
/* -------------------------------------------------------------------------------------------------
 * Create context that stores pin-input logic
 * -----------------------------------------------------------------------------------------------*/

const [PinInputProvider, usePinInputContext] = createContext({
  name: "PinInputContext",
  errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
});
/* -------------------------------------------------------------------------------------------------
 * usePinInput hook
 * -----------------------------------------------------------------------------------------------*/

const toArray = value => value?.split("");

function validate(value, type) {
  const NUMERIC_REGEX = /^[0-9]+$/;
  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
  const regex = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
  return regex.test(value);
}
/* -------------------------------------------------------------------------------------------------
 * usePinInput - handles the general pin input logic
 * -----------------------------------------------------------------------------------------------*/

/**
 * @internal
 */


function usePinInput(props = {}) {
  const {
    autoFocus,
    value,
    defaultValue,
    onChange,
    onComplete,
    placeholder = "â—‹",
    manageFocus = true,
    otp = false,
    id: idProp,
    isDisabled,
    isInvalid,
    type = "number",
    mask
  } = props;
  const uuid = useId();
  const id = idProp ?? `pin-input-${uuid}`;
  const descendants = usePinInputDescendants();
  const [moveFocus, setMoveFocus] = React.useState(true);
  const [focusedIndex, setFocusedIndex] = React.useState(-1);
  const [values, setValues] = useControllableState({
    defaultValue: toArray(defaultValue) || [],
    value: toArray(value),
    onChange: values => onChange?.(values.join(""))
  });
  React.useEffect(() => {
    if (autoFocus) {
      const first = descendants.first();
      if (first) focus(first.node, {
        nextTick: true
      });
    } // We don't want to listen for updates to `autoFocus` since it only runs initially
    // eslint-disable-next-line

  }, [descendants]);
  const focusNext = React.useCallback(index => {
    if (!moveFocus || !manageFocus) return;
    const next = descendants.next(index, false);
    if (next) focus(next.node, {
      nextTick: true
    });
  }, [descendants, moveFocus, manageFocus]);
  const setValue = React.useCallback((value, index) => {
    const nextValues = [...values];
    nextValues[index] = value;
    setValues(nextValues);
    const isComplete = value !== "" && nextValues.length === descendants.count() && nextValues.every(inputValue => inputValue != null && inputValue !== "");

    if (isComplete) {
      onComplete?.(nextValues.join(""));
    } else {
      focusNext(index);
    }
  }, [values, setValues, focusNext, onComplete, descendants]);
  const clear = React.useCallback(() => {
    const values = Array(descendants.count()).fill("");
    setValues(values);
    const first = descendants.first();
    if (first) focus(first.node);
  }, [descendants, setValues]);
  const getNextValue = React.useCallback((value, eventValue) => {
    let nextValue = eventValue;

    if (value?.length > 0) {
      if (value[0] === eventValue.charAt(0)) {
        nextValue = eventValue.charAt(1);
      } else if (value[0] === eventValue.charAt(1)) {
        nextValue = eventValue.charAt(0);
      }
    }

    return nextValue;
  }, []);
  const getInputProps = React.useCallback(props => {
    const {
      index,
      ...rest
    } = props;
    /**
     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js
     */

    const onChange = event => {
      const eventValue = event.target.value;
      const currentValue = values[index];
      const nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace

      if (nextValue === "") {
        setValue("", index);
        return;
      } // in the case of an autocomplete or copy and paste


      if (eventValue.length > 2) {
        // see if we can use the string to fill out our values
        if (validate(eventValue, type)) {
          // Ensure the value matches the number of inputs
          const nextValue = eventValue.split("").filter((_, index) => index < descendants.count());
          setValues(nextValue); // if pasting fills the entire input fields, trigger `onComplete`

          if (nextValue.length === descendants.count()) {
            onComplete?.(nextValue.join(""));
          }
        }
      } else {
        // only set if the new value is a number
        if (validate(nextValue, type)) {
          setValue(nextValue, index);
        }

        setMoveFocus(true);
      }
    };

    const onKeyDown = event => {
      if (event.key === "Backspace" && manageFocus) {
        if (event.target.value === "") {
          const prevInput = descendants.prev(index, false);

          if (prevInput) {
            setValue("", index - 1);
            focus(prevInput.node);
            setMoveFocus(true);
          }
        } else {
          setMoveFocus(false);
        }
      }
    };

    const onFocus = () => {
      setFocusedIndex(index);
    };

    const onBlur = () => {
      setFocusedIndex(-1);
    };

    const hasFocus = focusedIndex === index;
    const inputType = type === "number" ? "tel" : "text";
    return {
      "aria-label": "Please enter your pin code",
      inputMode: type === "number" ? "numeric" : "text",
      type: mask ? "password" : inputType,
      ...rest,
      id: `${id}-${index}`,
      disabled: isDisabled,
      "aria-invalid": ariaAttr(isInvalid),
      onChange: callAllHandlers(rest.onChange, onChange),
      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(rest.onFocus, onFocus),
      onBlur: callAllHandlers(rest.onBlur, onBlur),
      value: values[index] || "",
      autoComplete: otp ? "one-time-code" : "off",
      placeholder: hasFocus ? "" : placeholder
    };
  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);
  return {
    // prop getter
    getInputProps,
    // state
    id,
    descendants,
    values,
    // actions
    setValue,
    setValues,
    clear
  };
}

/**
 * @internal
 */
function usePinInputField(props = {}, ref = null) {
  const {
    getInputProps
  } = usePinInputContext();
  const {
    index,
    register
  } = usePinInputDescendant();
  return getInputProps({ ...props,
    ref: mergeRefs(register, ref),
    index
  });
}

const PinInput = props => {
  const styles = useStyleConfig("PinInput", props);
  const {
    children,
    ...rest
  } = omitThemingProps(props);
  const {
    descendants,
    ...context
  } = usePinInput(rest);
  const clones = getValidChildren(children).map(child => /*#__PURE__*/React.cloneElement(child, {
    __css: styles
  }));
  return /*#__PURE__*/React.createElement(PinInputDescendantsProvider, {
    value: descendants
  }, /*#__PURE__*/React.createElement(PinInputProvider, {
    value: context
  }, clones));
};

if (__DEV__) {
  PinInput.displayName = "PinInput";
}

const PinInputField = /*#__PURE__*/forwardRef((props, ref) => {
  const inputProps = usePinInputField(props, ref);
  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, inputProps, {
    className: cx("chakra-pin-input", props.className)
  }));
});

if (__DEV__) {
  PinInputField.displayName = "PinInputField";
}

export { PinInput, PinInputDescendantsProvider, PinInputField, PinInputProvider, usePinInput, usePinInputContext, usePinInputDescendant, usePinInputDescendants, usePinInputDescendantsContext, usePinInputField };

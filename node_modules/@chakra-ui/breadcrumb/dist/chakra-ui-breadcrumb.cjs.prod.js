'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var system = require('@chakra-ui/system');
var utils = require('@chakra-ui/utils');
var reactUtils = require('@chakra-ui/react-utils');
var React = require('react');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/**
 * React component that separates each breadcrumb link
 */
const BreadcrumbSeparator = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    spacing,
    ...rest
  } = props;
  const styles = system.useStyles();
  const separatorStyles = {
    mx: spacing,
    ...styles.separator
  };
  return /*#__PURE__*/React__namespace.createElement(system.chakra.span, _extends({
    ref: ref,
    role: "presentation"
  }, rest, {
    __css: separatorStyles
  }));
});

if (utils.__DEV__) {
  BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
}

/**
 * Breadcrumb link.
 *
 * It renders a `span` when it matches the current link. Otherwise,
 * it renders an anchor tag.
 */
const BreadcrumbLink = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    isCurrentPage,
    as,
    className,
    href,
    ...rest
  } = props;
  const styles = system.useStyles();
  const sharedProps = {
    ref,
    as,
    className: utils.cx("chakra-breadcrumb__link", className),
    ...rest
  };

  if (isCurrentPage) {
    return /*#__PURE__*/React__namespace.createElement(system.chakra.span, _extends({
      "aria-current": "page",
      __css: styles.link
    }, sharedProps));
  }

  return /*#__PURE__*/React__namespace.createElement(system.chakra.a, _extends({
    __css: styles.link,
    href: href
  }, sharedProps));
});

if (utils.__DEV__) {
  BreadcrumbLink.displayName = "BreadcrumbLink";
}

/**
 * BreadcrumbItem is used to group a breadcrumb link.
 * It renders a `li` element to denote it belongs to an order list of links.
 *
 * @see Docs https://chakra-ui.com/breadcrumb
 */
const BreadcrumbItem = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    isCurrentPage,
    separator,
    isLastChild,
    spacing,
    children,
    className,
    ...rest
  } = props;
  const validChildren = reactUtils.getValidChildren(children);
  const clones = validChildren.map(child => {
    if (child.type === BreadcrumbLink) {
      return /*#__PURE__*/React__namespace.cloneElement(child, {
        isCurrentPage
      });
    }

    if (child.type === BreadcrumbSeparator) {
      return /*#__PURE__*/React__namespace.cloneElement(child, {
        spacing,
        children: child.props.children || separator
      });
    }

    return child;
  });
  const styles = system.useStyles();
  const itemStyles = {
    display: "inline-flex",
    alignItems: "center",
    ...styles.item
  };

  const _className = utils.cx("chakra-breadcrumb__list-item", className);

  return /*#__PURE__*/React__namespace.createElement(system.chakra.li, _extends({
    ref: ref,
    className: _className
  }, rest, {
    __css: itemStyles
  }), clones, !isLastChild && /*#__PURE__*/React__namespace.createElement(BreadcrumbSeparator, {
    spacing: spacing
  }, separator));
});

if (utils.__DEV__) {
  BreadcrumbItem.displayName = "BreadcrumbItem";
}

/**
 * Breadcrumb is used to render a breadcrumb navigation landmark.
 * It renders a `nav` element with `aria-label` set to `Breadcrumb`
 *
 * @see Docs https://chakra-ui.com/breadcrumb
 */
const Breadcrumb = /*#__PURE__*/system.forwardRef((props, ref) => {
  const styles = system.useMultiStyleConfig("Breadcrumb", props);
  const ownProps = system.omitThemingProps(props);
  const {
    children,
    spacing = "0.5rem",
    separator = "/",
    className,
    ...rest
  } = ownProps;
  const validChildren = reactUtils.getValidChildren(children);
  const count = validChildren.length;
  const clones = validChildren.map((child, index) => /*#__PURE__*/React__namespace.cloneElement(child, {
    separator,
    spacing,
    isLastChild: count === index + 1
  }));

  const _className = utils.cx("chakra-breadcrumb", className);

  return /*#__PURE__*/React__namespace.createElement(system.chakra.nav, _extends({
    ref: ref,
    "aria-label": "breadcrumb",
    className: _className,
    __css: styles.container
  }, rest), /*#__PURE__*/React__namespace.createElement(system.StylesProvider, {
    value: styles
  }, /*#__PURE__*/React__namespace.createElement(system.chakra.ol, {
    className: "chakra-breadcrumb__list"
  }, clones)));
});

if (utils.__DEV__) {
  Breadcrumb.displayName = "Breadcrumb";
}

exports.Breadcrumb = Breadcrumb;
exports.BreadcrumbItem = BreadcrumbItem;
exports.BreadcrumbLink = BreadcrumbLink;
exports.BreadcrumbSeparator = BreadcrumbSeparator;

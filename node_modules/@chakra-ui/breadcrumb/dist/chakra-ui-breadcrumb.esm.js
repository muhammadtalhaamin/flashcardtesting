import { forwardRef, useStyles, chakra, useMultiStyleConfig, omitThemingProps, StylesProvider } from '@chakra-ui/system';
import { __DEV__, cx } from '@chakra-ui/utils';
import { getValidChildren } from '@chakra-ui/react-utils';
import * as React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/**
 * React component that separates each breadcrumb link
 */
const BreadcrumbSeparator = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    spacing,
    ...rest
  } = props;
  const styles = useStyles();
  const separatorStyles = {
    mx: spacing,
    ...styles.separator
  };
  return /*#__PURE__*/React.createElement(chakra.span, _extends({
    ref: ref,
    role: "presentation"
  }, rest, {
    __css: separatorStyles
  }));
});

if (__DEV__) {
  BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
}

/**
 * Breadcrumb link.
 *
 * It renders a `span` when it matches the current link. Otherwise,
 * it renders an anchor tag.
 */
const BreadcrumbLink = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    isCurrentPage,
    as,
    className,
    href,
    ...rest
  } = props;
  const styles = useStyles();
  const sharedProps = {
    ref,
    as,
    className: cx("chakra-breadcrumb__link", className),
    ...rest
  };

  if (isCurrentPage) {
    return /*#__PURE__*/React.createElement(chakra.span, _extends({
      "aria-current": "page",
      __css: styles.link
    }, sharedProps));
  }

  return /*#__PURE__*/React.createElement(chakra.a, _extends({
    __css: styles.link,
    href: href
  }, sharedProps));
});

if (__DEV__) {
  BreadcrumbLink.displayName = "BreadcrumbLink";
}

/**
 * BreadcrumbItem is used to group a breadcrumb link.
 * It renders a `li` element to denote it belongs to an order list of links.
 *
 * @see Docs https://chakra-ui.com/breadcrumb
 */
const BreadcrumbItem = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    isCurrentPage,
    separator,
    isLastChild,
    spacing,
    children,
    className,
    ...rest
  } = props;
  const validChildren = getValidChildren(children);
  const clones = validChildren.map(child => {
    if (child.type === BreadcrumbLink) {
      return /*#__PURE__*/React.cloneElement(child, {
        isCurrentPage
      });
    }

    if (child.type === BreadcrumbSeparator) {
      return /*#__PURE__*/React.cloneElement(child, {
        spacing,
        children: child.props.children || separator
      });
    }

    return child;
  });
  const styles = useStyles();
  const itemStyles = {
    display: "inline-flex",
    alignItems: "center",
    ...styles.item
  };

  const _className = cx("chakra-breadcrumb__list-item", className);

  return /*#__PURE__*/React.createElement(chakra.li, _extends({
    ref: ref,
    className: _className
  }, rest, {
    __css: itemStyles
  }), clones, !isLastChild && /*#__PURE__*/React.createElement(BreadcrumbSeparator, {
    spacing: spacing
  }, separator));
});

if (__DEV__) {
  BreadcrumbItem.displayName = "BreadcrumbItem";
}

/**
 * Breadcrumb is used to render a breadcrumb navigation landmark.
 * It renders a `nav` element with `aria-label` set to `Breadcrumb`
 *
 * @see Docs https://chakra-ui.com/breadcrumb
 */
const Breadcrumb = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Breadcrumb", props);
  const ownProps = omitThemingProps(props);
  const {
    children,
    spacing = "0.5rem",
    separator = "/",
    className,
    ...rest
  } = ownProps;
  const validChildren = getValidChildren(children);
  const count = validChildren.length;
  const clones = validChildren.map((child, index) => /*#__PURE__*/React.cloneElement(child, {
    separator,
    spacing,
    isLastChild: count === index + 1
  }));

  const _className = cx("chakra-breadcrumb", className);

  return /*#__PURE__*/React.createElement(chakra.nav, _extends({
    ref: ref,
    "aria-label": "breadcrumb",
    className: _className,
    __css: styles.container
  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {
    value: styles
  }, /*#__PURE__*/React.createElement(chakra.ol, {
    className: "chakra-breadcrumb__list"
  }, clones)));
});

if (__DEV__) {
  Breadcrumb.displayName = "Breadcrumb";
}

export { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbSeparator };

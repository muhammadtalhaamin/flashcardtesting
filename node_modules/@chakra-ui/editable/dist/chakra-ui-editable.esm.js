import { forwardRef, useMultiStyleConfig, omitThemingProps, StylesProvider, chakra, useStyles } from '@chakra-ui/system';
import { focus, normalizeEventKey, isEmpty, getRelatedTarget, contains, ariaAttr, callAllHandlers, cx, runIfFn, __DEV__ } from '@chakra-ui/utils';
import { mergeRefs, createContext } from '@chakra-ui/react-utils';
import * as React from 'react';
import { useState, useRef, useCallback } from 'react';
import { useControllableState, useFocusOnPointerDown, useUpdateEffect } from '@chakra-ui/hooks';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/**
 * React hook for managing the inline renaming of some text.
 *
 * @see Docs https://chakra-ui.com/editable
 */
function useEditable(props = {}) {
  const {
    onChange: onChangeProp,
    onCancel: onCancelProp,
    onSubmit: onSubmitProp,
    value: valueProp,
    isDisabled,
    defaultValue,
    startWithEditView,
    isPreviewFocusable = true,
    submitOnBlur = true,
    selectAllOnFocus = true,
    placeholder,
    onEdit: onEditProp,
    ...htmlProps
  } = props;
  const defaultIsEditing = Boolean(startWithEditView && !isDisabled);
  const [isEditing, setIsEditing] = useState(defaultIsEditing);
  const [value, setValue] = useControllableState({
    defaultValue: defaultValue || "",
    value: valueProp,
    onChange: onChangeProp
  });
  /**
   * Keep track of the previous value, so if users
   * presses `cancel`, we can revert to it.
   */

  const [prevValue, setPrevValue] = useState(value);
  /**
   * Ref to help focus the input in edit mode
   */

  const inputRef = useRef(null);
  const previewRef = useRef(null);
  const editButtonRef = useRef(null);
  const cancelButtonRef = useRef(null);
  const submitButtonRef = useRef(null);
  useFocusOnPointerDown({
    ref: inputRef,
    enabled: isEditing,
    elements: [cancelButtonRef, submitButtonRef]
  });
  const isInteractive = !isEditing || !isDisabled;
  useUpdateEffect(() => {
    if (!isEditing) {
      focus(editButtonRef.current);
      return;
    }

    focus(inputRef.current, {
      selectTextIfInput: selectAllOnFocus
    });
    onEditProp?.();
  }, [isEditing, onEditProp, selectAllOnFocus]);
  const onEdit = useCallback(() => {
    if (isInteractive) {
      setIsEditing(true);
    }
  }, [isInteractive]);
  const onCancel = useCallback(() => {
    setIsEditing(false);
    setValue(prevValue);
    onCancelProp?.(prevValue);
  }, [onCancelProp, setValue, prevValue]);
  const onSubmit = useCallback(() => {
    setIsEditing(false);
    setPrevValue(value);
    onSubmitProp?.(value);
  }, [value, onSubmitProp]);
  const onChange = useCallback(event => {
    setValue(event.target.value);
  }, [setValue]);
  const onKeyDown = useCallback(event => {
    const eventKey = normalizeEventKey(event);
    const keyMap = {
      Escape: onCancel,
      Enter: event => {
        if (!event.shiftKey && !event.metaKey) {
          onSubmit();
        }
      }
    };
    const action = keyMap[eventKey];

    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [onCancel, onSubmit]);
  const isValueEmpty = isEmpty(value);
  const onBlur = useCallback(event => {
    const relatedTarget = getRelatedTarget(event);
    const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);
    const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);
    const isValidBlur = !targetIsCancel && !targetIsSubmit;

    if (isValidBlur && submitOnBlur) {
      onSubmit();
    }
  }, [submitOnBlur, onSubmit]);
  const getPreviewProps = useCallback((props = {}, ref = null) => {
    const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined;
    return { ...props,
      ref: mergeRefs(ref, previewRef),
      children: isValueEmpty ? placeholder : value,
      hidden: isEditing,
      "aria-disabled": ariaAttr(isDisabled),
      tabIndex,
      onFocus: callAllHandlers(props.onFocus, onEdit)
    };
  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, placeholder, value]);
  const getInputProps = useCallback((props = {}, ref = null) => ({ ...props,
    hidden: !isEditing,
    placeholder,
    ref: mergeRefs(ref, inputRef),
    disabled: isDisabled,
    "aria-disabled": ariaAttr(isDisabled),
    value,
    onBlur: callAllHandlers(props.onBlur, onBlur),
    onChange: callAllHandlers(props.onChange, onChange),
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  }), [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value]);
  const getEditButtonProps = useCallback((props = {}, ref = null) => ({
    "aria-label": "Edit",
    ...props,
    type: "button",
    onClick: callAllHandlers(props.onClick, onEdit),
    ref: mergeRefs(ref, editButtonRef)
  }), [onEdit]);
  const getSubmitButtonProps = useCallback((props = {}, ref = null) => ({ ...props,
    "aria-label": "Submit",
    ref: mergeRefs(submitButtonRef, ref),
    type: "button",
    onClick: callAllHandlers(props.onClick, onSubmit)
  }), [onSubmit]);
  const getCancelButtonProps = useCallback((props = {}, ref = null) => ({
    "aria-label": "Cancel",
    id: "cancel",
    ...props,
    ref: mergeRefs(cancelButtonRef, ref),
    type: "button",
    onClick: callAllHandlers(props.onClick, onCancel)
  }), [onCancel]);
  return {
    isEditing,
    isDisabled,
    isValueEmpty,
    value,
    onEdit,
    onCancel,
    onSubmit,
    getPreviewProps,
    getInputProps,
    getEditButtonProps,
    getSubmitButtonProps,
    getCancelButtonProps,
    htmlProps
  };
}

const [EditableProvider, useEditableContext] = createContext({
  name: "EditableContext",
  errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});

/**
 * Editable
 *
 * The wrapper that provides context and logic for all editable
 * components. It renders a `div`
 */
const Editable = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Editable", props);
  const ownProps = omitThemingProps(props);
  const {
    htmlProps,
    ...context
  } = useEditable(ownProps);
  const {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  } = context;

  const _className = cx("chakra-editable", props.className);

  const children = runIfFn(props.children, {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  });
  return /*#__PURE__*/React.createElement(EditableProvider, {
    value: context
  }, /*#__PURE__*/React.createElement(StylesProvider, {
    value: styles
  }, /*#__PURE__*/React.createElement(chakra.div, _extends({
    ref: ref
  }, htmlProps, {
    className: _className
  }), children)));
});

if (__DEV__) {
  Editable.displayName = "Editable";
}

const commonStyles = {
  fontSize: "inherit",
  fontWeight: "inherit",
  textAlign: "inherit",
  bg: "transparent"
};

/**
 * EditablePreview
 *
 * The `span` used to display the final value, in the `preview` mode
 */
const EditablePreview = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    getPreviewProps
  } = useEditableContext();
  const styles = useStyles();
  const previewProps = getPreviewProps(props, ref);

  const _className = cx("chakra-editable__preview", props.className);

  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, previewProps, {
    __css: {
      cursor: "text",
      display: "inline-block",
      ...commonStyles,
      ...styles.preview
    },
    className: _className
  }));
});

if (__DEV__) {
  EditablePreview.displayName = "EditablePreview";
}

/**
 * EditableInput
 *
 * The input used in the `edit` mode
 */
const EditableInput = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    getInputProps
  } = useEditableContext();
  const styles = useStyles();
  const inputProps = getInputProps(props, ref);

  const _className = cx("chakra-editable__input", props.className);

  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, inputProps, {
    __css: {
      outline: 0,
      ...commonStyles,
      ...styles.input
    },
    className: _className
  }));
});

if (__DEV__) {
  EditableInput.displayName = "EditableInput";
}
/**
 * React hook use to gain access to the editable state and actions.
 */


function useEditableState() {
  const {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled
  } = useEditableContext();
  return {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled
  };
}
/**
 * React hook use to create controls for the editable component
 */

function useEditableControls() {
  const {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  } = useEditableContext();
  return {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  };
}

export { Editable, EditableInput, EditablePreview, useEditable, useEditableControls, useEditableState };

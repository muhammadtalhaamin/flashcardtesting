import { isNumber, warn, mergeWith, cx, __DEV__ } from '@chakra-ui/utils';
import { AnimatePresence, motion } from 'framer-motion';
import * as React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const TransitionEasings = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
const TransitionVariants = {
  scale: {
    enter: {
      scale: 1
    },
    exit: {
      scale: 0.95
    }
  },
  fade: {
    enter: {
      opacity: 1
    },
    exit: {
      opacity: 0
    }
  },
  pushLeft: {
    enter: {
      x: "100%"
    },
    exit: {
      x: "-30%"
    }
  },
  pushRight: {
    enter: {
      x: "-100%"
    },
    exit: {
      x: "30%"
    }
  },
  pushUp: {
    enter: {
      y: "100%"
    },
    exit: {
      y: "-30%"
    }
  },
  pushDown: {
    enter: {
      y: "-100%"
    },
    exit: {
      y: "30%"
    }
  },
  slideLeft: {
    position: {
      left: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: "-100%",
      y: 0
    }
  },
  slideRight: {
    position: {
      right: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: "100%",
      y: 0
    }
  },
  slideUp: {
    position: {
      top: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: 0,
      y: "-100%"
    }
  },
  slideDown: {
    position: {
      bottom: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: 0,
      y: "100%"
    }
  }
};
function slideTransition(options) {
  const side = options?.direction ?? "right";

  switch (side) {
    case "right":
      return TransitionVariants.slideRight;

    case "left":
      return TransitionVariants.slideLeft;

    case "bottom":
      return TransitionVariants.slideDown;

    case "top":
      return TransitionVariants.slideUp;

    default:
      return TransitionVariants.slideRight;
  }
}
const TransitionDefaults = {
  enter: {
    duration: 0.2,
    ease: TransitionEasings.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TransitionEasings.easeIn
  }
};
const withDelay = {
  enter: (transition, delay) => ({ ...transition,
    delay: isNumber(delay) ? delay : delay?.["enter"]
  }),
  exit: (transition, delay) => ({ ...transition,
    delay: isNumber(delay) ? delay : delay?.["exit"]
  })
};

const isNumeric = value => value != null && parseInt(value.toString(), 10) > 0;

const defaultTransitions = {
  exit: {
    height: {
      duration: 0.2,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.3,
      ease: TransitionEasings.ease
    }
  },
  enter: {
    height: {
      duration: 0.3,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.4,
      ease: TransitionEasings.ease
    }
  }
};
const variants$4 = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition,
    transitionEnd,
    delay
  }) => ({ ...(animateOpacity && {
      opacity: isNumeric(startingHeight) ? 1 : 0
    }),
    overflow: "hidden",
    height: startingHeight,
    transitionEnd: transitionEnd?.exit,
    transition: transition?.exit ?? withDelay.exit(defaultTransitions.exit, delay)
  }),
  enter: ({
    animateOpacity,
    endingHeight,
    transition,
    transitionEnd,
    delay
  }) => ({ ...(animateOpacity && {
      opacity: 1
    }),
    height: endingHeight,
    transitionEnd: transitionEnd?.enter,
    transition: transition?.enter ?? withDelay.enter(defaultTransitions.enter, delay)
  })
};
const Collapse = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    in: isOpen,
    unmountOnExit,
    animateOpacity = true,
    startingHeight = 0,
    endingHeight = "auto",
    style,
    className,
    transition,
    transitionEnd,
    ...rest
  } = props;
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    const timeout = setTimeout(() => {
      setMounted(true);
    });
    return () => clearTimeout(timeout);
  }, []);
  /**
   * Warn ðŸš¨: `startingHeight` and `unmountOnExit` are mutually exclusive
   *
   * If you specify a starting height, the collapsed needs to be mounted
   * for the height to take effect.
   */

  warn({
    condition: Boolean(startingHeight > 0 && unmountOnExit),
    message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
  });
  const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
  const custom = {
    startingHeight,
    endingHeight,
    animateOpacity,
    transition: !mounted ? {
      enter: {
        duration: 0
      }
    } : transition,
    transitionEnd: mergeWith(transitionEnd, {
      enter: {
        overflow: "initial"
      },
      exit: unmountOnExit ? undefined : {
        display: hasStartingHeight ? "block" : "none"
      }
    })
  };
  const show = unmountOnExit ? isOpen : true;
  const animate = isOpen || unmountOnExit ? "enter" : "exit";
  return /*#__PURE__*/React.createElement(AnimatePresence, {
    initial: false,
    custom: custom
  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({
    ref: ref
  }, rest, {
    className: cx("chakra-collapse", className),
    style: {
      overflow: "hidden",
      display: "block",
      ...style
    },
    custom: custom,
    variants: variants$4,
    initial: unmountOnExit ? "exit" : false,
    animate: animate,
    exit: "exit"
  })));
});

if (__DEV__) {
  Collapse.displayName = "Collapse";
}

const variants$3 = {
  enter: ({
    transition,
    transitionEnd,
    delay
  } = {}) => ({
    opacity: 1,
    transition: transition?.enter ?? withDelay.enter(TransitionDefaults.enter, delay),
    transitionEnd: transitionEnd?.enter
  }),
  exit: ({
    transition,
    transitionEnd,
    delay
  } = {}) => ({
    opacity: 0,
    transition: transition?.exit ?? withDelay.exit(TransitionDefaults.exit, delay),
    transitionEnd: transitionEnd?.exit
  })
};
const fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$3
};
const Fade = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    unmountOnExit,
    in: isOpen,
    className,
    transition,
    transitionEnd,
    delay,
    ...rest
  } = props;
  const animate = isOpen || unmountOnExit ? "enter" : "exit";
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const custom = {
    transition,
    transitionEnd,
    delay
  };
  return /*#__PURE__*/React.createElement(AnimatePresence, {
    custom: custom
  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({
    ref: ref,
    className: cx("chakra-fade", className),
    custom: custom
  }, fadeConfig, {
    animate: animate
  }, rest)));
});

if (__DEV__) {
  Fade.displayName = "Fade";
}

const variants$2 = {
  exit: ({
    reverse,
    initialScale,
    transition,
    transitionEnd,
    delay
  }) => ({
    opacity: 0,
    ...(reverse ? {
      scale: initialScale,
      transitionEnd: transitionEnd?.exit
    } : {
      transitionEnd: {
        scale: initialScale,
        ...transitionEnd?.exit
      }
    }),
    transition: transition?.exit ?? withDelay.exit(TransitionDefaults.exit, delay)
  }),
  enter: ({
    transitionEnd,
    transition,
    delay
  }) => ({
    opacity: 1,
    scale: 1,
    transition: transition?.enter ?? withDelay.enter(TransitionDefaults.enter, delay),
    transitionEnd: transitionEnd?.enter
  })
};
const scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$2
};
const ScaleFade = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    unmountOnExit,
    in: isOpen,
    reverse = true,
    initialScale = 0.95,
    className,
    transition,
    transitionEnd,
    delay,
    ...rest
  } = props;
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = {
    initialScale,
    reverse,
    transition,
    transitionEnd,
    delay
  };
  return /*#__PURE__*/React.createElement(AnimatePresence, {
    custom: custom
  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({
    ref: ref,
    className: cx("chakra-offset-slide", className)
  }, scaleFadeConfig, {
    animate: animate,
    custom: custom
  }, rest)));
});

if (__DEV__) {
  ScaleFade.displayName = "ScaleFade";
}

const defaultTransition = {
  exit: {
    duration: 0.15,
    ease: TransitionEasings.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
const variants$1 = {
  exit: ({
    direction,
    transition,
    transitionEnd,
    delay
  }) => {
    const {
      exit: exitStyles
    } = slideTransition({
      direction
    });
    return { ...exitStyles,
      transition: transition?.exit ?? withDelay.exit(defaultTransition.exit, delay),
      transitionEnd: transitionEnd?.exit
    };
  },
  enter: ({
    direction,
    transitionEnd,
    transition,
    delay
  }) => {
    const {
      enter: enterStyles
    } = slideTransition({
      direction
    });
    return { ...enterStyles,
      transition: transition?.enter ?? withDelay.enter(defaultTransition.enter, delay),
      transitionEnd: transitionEnd?.enter
    };
  }
};
const Slide = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    direction = "right",
    style,
    unmountOnExit,
    in: isOpen,
    className,
    transition,
    transitionEnd,
    delay,
    ...rest
  } = props;
  const transitionStyles = slideTransition({
    direction
  });
  const computedStyle = Object.assign({
    position: "fixed"
  }, transitionStyles.position, style);
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = {
    transitionEnd,
    transition,
    direction,
    delay
  };
  return /*#__PURE__*/React.createElement(AnimatePresence, {
    custom: custom
  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({
    ref: ref,
    initial: "exit",
    className: cx("chakra-slide", className),
    animate: animate,
    exit: "exit",
    custom: custom,
    variants: variants$1,
    style: computedStyle
  }, rest)));
});

if (__DEV__) {
  Slide.displayName = "Slide";
}

const variants = {
  initial: ({
    offsetX,
    offsetY,
    transition,
    transitionEnd,
    delay
  }) => ({
    opacity: 0,
    x: offsetX,
    y: offsetY,
    transition: transition?.exit ?? withDelay.exit(TransitionDefaults.exit, delay),
    transitionEnd: transitionEnd?.exit
  }),
  enter: ({
    transition,
    transitionEnd,
    delay
  }) => ({
    opacity: 1,
    x: 0,
    y: 0,
    transition: transition?.enter ?? withDelay.enter(TransitionDefaults.enter, delay),
    transitionEnd: transitionEnd?.enter
  }),
  exit: ({
    offsetY,
    offsetX,
    transition,
    transitionEnd,
    reverse,
    delay
  }) => {
    const offset = {
      x: offsetX,
      y: offsetY
    };
    return {
      opacity: 0,
      transition: transition?.exit ?? withDelay.exit(TransitionDefaults.exit, delay),
      ...(reverse ? { ...offset,
        transitionEnd: transitionEnd?.exit
      } : {
        transitionEnd: { ...offset,
          ...transitionEnd?.exit
        }
      })
    };
  }
};
const slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants
};
const SlideFade = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    unmountOnExit,
    in: isOpen,
    reverse = true,
    className,
    offsetX = 0,
    offsetY = 8,
    transition,
    transitionEnd,
    delay,
    ...rest
  } = props;
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = {
    offsetX,
    offsetY,
    reverse,
    transition,
    transitionEnd,
    delay
  };
  return /*#__PURE__*/React.createElement(AnimatePresence, {
    custom: custom
  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({
    ref: ref,
    className: cx("chakra-offset-slide", className),
    custom: custom
  }, slideFadeConfig, {
    animate: animate
  }, rest)));
});

if (__DEV__) {
  SlideFade.displayName = "SlideFade";
}

export { Collapse, TransitionEasings as EASINGS, Fade, ScaleFade, Slide, SlideFade, fadeConfig, scaleFadeConfig, slideFadeConfig };

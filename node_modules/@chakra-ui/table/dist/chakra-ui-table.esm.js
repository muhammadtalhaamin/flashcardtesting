import { forwardRef, chakra, useMultiStyleConfig, omitThemingProps, StylesProvider, useStyles } from '@chakra-ui/system';
import { cx, __DEV__ } from '@chakra-ui/utils';
import * as React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const TableContainer = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    overflow,
    overflowX,
    className,
    ...rest
  } = props;
  return /*#__PURE__*/React.createElement(chakra.div, _extends({
    ref: ref,
    className: cx("chakra-table__container", className)
  }, rest, {
    __css: {
      display: "block",
      whiteSpace: "nowrap",
      WebkitOverflowScrolling: "touch",
      overflowX: overflow ?? overflowX ?? "auto",
      overflowY: "hidden",
      maxWidth: "100%"
    }
  }));
});
const Table = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Table", props);
  const {
    className,
    ...tableProps
  } = omitThemingProps(props);
  return /*#__PURE__*/React.createElement(StylesProvider, {
    value: styles
  }, /*#__PURE__*/React.createElement(chakra.table, _extends({
    role: "table",
    ref: ref,
    __css: styles.table,
    className: cx("chakra-table", className)
  }, tableProps)));
});

if (__DEV__) {
  Table.displayName = "Table";
}

const TableCaption = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    placement = "bottom",
    ...rest
  } = props;
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.caption, _extends({}, rest, {
    ref: ref,
    __css: { ...styles.caption,
      captionSide: placement
    }
  }));
});

if (__DEV__) {
  TableCaption.displayName = "TableCaption";
}

const Thead = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.thead, _extends({}, props, {
    ref: ref,
    __css: styles.thead
  }));
});
const Tbody = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.tbody, _extends({}, props, {
    ref: ref,
    __css: styles.tbody
  }));
});
const Tfoot = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.tfoot, _extends({}, props, {
    ref: ref,
    __css: styles.tfoot
  }));
});
const Th = /*#__PURE__*/forwardRef(({
  isNumeric,
  ...rest
}, ref) => {
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.th, _extends({}, rest, {
    ref: ref,
    __css: styles.th,
    "data-is-numeric": isNumeric
  }));
});
const Tr = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.tr, _extends({
    role: "row"
  }, props, {
    ref: ref,
    __css: styles.tr
  }));
});
const Td = /*#__PURE__*/forwardRef(({
  isNumeric,
  ...rest
}, ref) => {
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.td, _extends({
    role: "gridcell"
  }, rest, {
    ref: ref,
    __css: styles.td,
    "data-is-numeric": isNumeric
  }));
});

export { Table, TableCaption, TableContainer, Tbody, Td, Tfoot, Th, Thead, Tr };

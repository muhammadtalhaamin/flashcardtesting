'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var image = require('@chakra-ui/image');
var system = require('@chakra-ui/system');
var utils = require('@chakra-ui/utils');
var React = require('react');
var reactUtils = require('@chakra-ui/react-utils');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/**
 * AvatarBadge used to show extra badge to the top-right
 * or bottom-right corner of an avatar.
 */
const AvatarBadge = /*#__PURE__*/system.forwardRef((props, ref) => {
  const styles = system.useStyles();
  const badgeStyles = {
    position: "absolute",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    insetEnd: "0",
    bottom: "0",
    ...styles.badge
  };
  return /*#__PURE__*/React__namespace.createElement(system.chakra.div, _extends({
    ref: ref
  }, props, {
    className: utils.cx("chakra-avatar__badge", props.className),
    __css: badgeStyles
  }));
});

if (utils.__DEV__) {
  AvatarBadge.displayName = "AvatarBadge";
}

function initials(name) {
  const [firstName, lastName] = name.split(" ");
  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
}

/**
 * The avatar name container
 */
const AvatarName = props => {
  const {
    name,
    getInitials,
    ...rest
  } = props;
  const styles = system.useStyles();
  return /*#__PURE__*/React__namespace.createElement(system.chakra.div, _extends({
    role: "img",
    "aria-label": name
  }, rest, {
    __css: styles.label
  }), name ? getInitials?.(name) : null);
};
/**
 * Fallback avatar react component.
 * This should be a generic svg used to represent an avatar
 */


const DefaultIcon = props => /*#__PURE__*/React__namespace.createElement(system.chakra.svg, _extends({
  viewBox: "0 0 128 128",
  color: "#fff",
  width: "100%",
  height: "100%",
  className: "chakra-avatar__svg"
}, props), /*#__PURE__*/React__namespace.createElement("path", {
  fill: "currentColor",
  d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
}), /*#__PURE__*/React__namespace.createElement("path", {
  fill: "currentColor",
  d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
}));

const baseStyle = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textTransform: "uppercase",
  fontWeight: "medium",
  position: "relative",
  flexShrink: 0
};

/**
 * Avatar component that renders an user avatar with
 * support for fallback avatar and name-only avatars
 */
const Avatar = /*#__PURE__*/system.forwardRef((props, ref) => {
  const styles = system.useMultiStyleConfig("Avatar", props);
  const {
    src,
    name,
    showBorder,
    borderRadius = "full",
    onError,
    getInitials = initials,
    icon = /*#__PURE__*/React__namespace.createElement(DefaultIcon, null),
    iconLabel = " avatar",
    loading,
    children,
    borderColor,
    ignoreFallback,
    ...rest
  } = system.omitThemingProps(props);
  const avatarStyles = {
    borderRadius,
    borderWidth: showBorder ? "2px" : undefined,
    ...baseStyle,
    ...styles.container
  };

  if (borderColor) {
    avatarStyles.borderColor = borderColor;
  }

  return /*#__PURE__*/React__namespace.createElement(system.chakra.span, _extends({
    ref: ref
  }, rest, {
    className: utils.cx("chakra-avatar", props.className),
    __css: avatarStyles
  }), /*#__PURE__*/React__namespace.createElement(system.StylesProvider, {
    value: styles
  }, /*#__PURE__*/React__namespace.createElement(AvatarImage, {
    src: src,
    loading: loading,
    onError: onError,
    getInitials: getInitials,
    name: name,
    borderRadius: borderRadius,
    icon: icon,
    iconLabel: iconLabel,
    ignoreFallback: ignoreFallback
  }), children));
});

if (utils.__DEV__) {
  Avatar.displayName = "Avatar";
}

const AvatarImage = props => {
  const {
    src,
    onError,
    getInitials,
    name,
    borderRadius,
    loading,
    iconLabel,
    icon = /*#__PURE__*/React__namespace.createElement(DefaultIcon, null),
    ignoreFallback
  } = props;
  /**
   * use the image hook to only show the image when it has loaded
   */

  const status = image.useImage({
    src,
    onError,
    ignoreFallback
  });
  const hasLoaded = status === "loaded";
  /**
   * Fallback avatar applies under 2 conditions:
   * - If `src` was passed and the image has not loaded or failed to load
   * - If `src` wasn't passed
   *
   * In this case, we'll show either the name avatar or default avatar
   */

  const showFallback = !src || !hasLoaded;

  if (showFallback) {
    return name ? /*#__PURE__*/React__namespace.createElement(AvatarName, {
      className: "chakra-avatar__initials",
      getInitials: getInitials,
      name: name
    }) : /*#__PURE__*/React__namespace.cloneElement(icon, {
      role: "img",
      "aria-label": iconLabel
    });
  }
  /**
   * If `src` was passed and the image has loaded, we'll show it
   */


  return /*#__PURE__*/React__namespace.createElement(system.chakra.img, {
    src: src,
    alt: name,
    className: "chakra-avatar__img",
    loading: loading,
    __css: {
      width: "100%",
      height: "100%",
      objectFit: "cover",
      borderRadius
    }
  });
};

if (utils.__DEV__) {
  AvatarImage.displayName = "AvatarImage";
}

/**
 * AvatarGroup displays a number of avatars grouped together in a stack.
 */
const AvatarGroup = /*#__PURE__*/system.forwardRef((props, ref) => {
  const styles = system.useMultiStyleConfig("Avatar", props);
  const {
    children,
    borderColor,
    max,
    spacing = "-0.75rem",
    borderRadius = "full",
    ...rest
  } = system.omitThemingProps(props);
  const validChildren = reactUtils.getValidChildren(children);
  /**
   * get the avatars within the max
   */

  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;
  /**
   * get the remaining avatar count
   */

  const excess = max != null && validChildren.length - max;
  /**
   * Reversing the children is a great way to avoid using zIndex
   * to overlap the avatars
   */

  const reversedChildren = childrenWithinMax.reverse();
  const clones = reversedChildren.map((child, index) => {
    const isFirstAvatar = index === 0;
    const childProps = {
      marginEnd: isFirstAvatar ? 0 : spacing,
      size: props.size,
      borderColor: child.props.borderColor ?? borderColor,
      showBorder: true
    };
    return /*#__PURE__*/React__namespace.cloneElement(child, utils.filterUndefined(childProps));
  });
  const groupStyles = {
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end",
    flexDirection: "row-reverse"
  };
  const excessStyles = {
    borderRadius,
    marginStart: spacing,
    ...baseStyle,
    ...styles.excessLabel
  };
  return /*#__PURE__*/React__namespace.createElement(system.chakra.div, _extends({
    ref: ref,
    role: "group",
    __css: groupStyles
  }, rest, {
    className: utils.cx("chakra-avatar__group", props.className)
  }), excess > 0 && /*#__PURE__*/React__namespace.createElement(system.chakra.span, {
    className: "chakra-avatar__excess",
    __css: excessStyles
  }, `+${excess}`), clones);
});

if (utils.__DEV__) {
  AvatarGroup.displayName = "AvatarGroup";
}

exports.Avatar = Avatar;
exports.AvatarBadge = AvatarBadge;
exports.AvatarGroup = AvatarGroup;
exports.baseStyle = baseStyle;

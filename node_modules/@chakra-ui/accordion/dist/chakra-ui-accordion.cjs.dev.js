'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var icon = require('@chakra-ui/icon');
var system = require('@chakra-ui/system');
var transition = require('@chakra-ui/transition');
var utils = require('@chakra-ui/utils');
var reactUtils = require('@chakra-ui/react-utils');
var React = require('react');
var descendant = require('@chakra-ui/descendant');
var hooks = require('@chakra-ui/hooks');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/* -------------------------------------------------------------------------------------------------
 * Create context to track descendants and their indices
 * -----------------------------------------------------------------------------------------------*/

const [AccordionDescendantsProvider, useAccordionDescendantsContext, useAccordionDescendants, useAccordionDescendant] = descendant.createDescendantContext();
/* -------------------------------------------------------------------------------------------------
 * useAccordion - The root react hook that manages all accordion items
 * -----------------------------------------------------------------------------------------------*/

/**
 * useAccordion hook provides all the state and focus management logic
 * for accordion items.
 */
function useAccordion(props) {
  const {
    onChange,
    defaultIndex,
    index: indexProp,
    allowMultiple,
    allowToggle,
    ...htmlProps
  } = props; // validate the props and `warn` if used incorrectly

  allowMultipleWarning(props);
  allowMultipleAndAllowToggleWarning(props);
  /**
   * Think of this as the register to each accordion item.
   * We used to manage focus between accordion item buttons.
   *
   * Every accordion item, registers their button refs in this context
   */

  const descendants = useAccordionDescendants();
  /**
   * This state is used to track the index focused accordion
   * button when click on the button, tab on the button, or
   * use the down/up arrow to navigate.
   */

  const [focusedIndex, setFocusedIndex] = React.useState(-1);
  /**
   * Reset focused index when accordion unmounts
   * or descendants change
   */

  hooks.useUnmountEffect(() => {
    setFocusedIndex(-1);
  });
  /**
   * Hook that manages the controlled and un-controlled state
   * for the accordion.
   */

  const [index, setIndex] = hooks.useControllableState({
    value: indexProp,

    defaultValue() {
      if (allowMultiple) return defaultIndex ?? [];
      return defaultIndex ?? -1;
    },

    onChange
  });
  /**
   * Gets the `isOpen` and `onChange` props for a child accordion item based on
   * the child's index.
   *
   * @param idx {number} The index of the child accordion item
   */

  const getAccordionItemProps = idx => {
    let isOpen = false;

    if (idx !== null) {
      isOpen = utils.isArray(index) ? index.includes(idx) : index === idx;
    }

    const onChange = isOpen => {
      if (idx === null) return;

      if (allowMultiple && utils.isArray(index)) {
        const nextState = isOpen ? utils.addItem(index, idx) : utils.removeItem(index, idx);
        setIndex(nextState);
      } else if (isOpen) {
        setIndex(idx);
      } else if (allowToggle) {
        setIndex(-1);
      }
    };

    return {
      isOpen,
      onChange
    };
  };

  return {
    index,
    setIndex,
    htmlProps,
    getAccordionItemProps,
    focusedIndex,
    setFocusedIndex,
    descendants
  };
}
const [AccordionProvider, useAccordionContext] = reactUtils.createContext({
  name: "AccordionContext",
  errorMessage: "useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`"
});
/* -------------------------------------------------------------------------------------------------
 * Hook for a single accordion item
 * -----------------------------------------------------------------------------------------------*/

/**
 * useAccordionItem
 *
 * React hook that provides the open/close functionality
 * for an accordion item and its children
 */
function useAccordionItem(props) {
  const {
    isDisabled,
    isFocusable,
    id,
    ...htmlProps
  } = props;
  const {
    getAccordionItemProps,
    setFocusedIndex
  } = useAccordionContext();
  const buttonRef = React.useRef(null);
  /**
   * Generate unique ids for all accordion item components (button and panel)
   */

  const [buttonId, panelId] = hooks.useIds(id, `accordion-button`, `accordion-panel`);
  focusableNotDisabledWarning(props);
  /**
   * Think of this as a way to register this accordion item
   * with its parent `useAccordion`
   */

  const {
    register,
    index,
    descendants
  } = useAccordionDescendant({
    disabled: isDisabled && !isFocusable
  });
  const {
    isOpen,
    onChange
  } = getAccordionItemProps(index === -1 ? null : index);
  warnIfOpenAndDisabled({
    isOpen,
    isDisabled
  });

  const onOpen = () => {
    onChange?.(true);
  };

  const onClose = () => {
    onChange?.(false);
  };
  /**
   * Toggle the visibility of the accordion item
   */


  const onClick = React.useCallback(() => {
    onChange?.(!isOpen);
    setFocusedIndex(index);
  }, [index, setFocusedIndex, isOpen, onChange]);
  /**
   * Manage keyboard navigation between accordion items.
   */

  const onKeyDown = React.useCallback(event => {
    const eventKey = utils.normalizeEventKey(event);
    const keyMap = {
      ArrowDown: () => {
        const next = descendants.nextEnabled(index);
        if (next) utils.focus(next.node);
      },
      ArrowUp: () => {
        const prev = descendants.prevEnabled(index);
        if (prev) utils.focus(prev.node);
      },
      Home: () => {
        const first = descendants.firstEnabled();
        if (first) utils.focus(first.node);
      },
      End: () => {
        const last = descendants.lastEnabled();
        if (last) utils.focus(last.node);
      }
    };
    const action = keyMap[eventKey];

    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, index]);
  /**
   * Since each accordion item's button still remains tabbable, let's
   * update the focusedIndex when it receives focus
   */

  const onFocus = React.useCallback(() => {
    setFocusedIndex(index);
  }, [setFocusedIndex, index]);
  const getButtonProps = React.useCallback((props = {}, ref = null) => ({ ...props,
    type: "button",
    ref: reactUtils.mergeRefs(register, buttonRef, ref),
    id: buttonId,
    disabled: !!isDisabled,
    "aria-expanded": !!isOpen,
    "aria-controls": panelId,
    onClick: utils.callAllHandlers(props.onClick, onClick),
    onFocus: utils.callAllHandlers(props.onFocus, onFocus),
    onKeyDown: utils.callAllHandlers(props.onKeyDown, onKeyDown)
  }), [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId, register]);
  const getPanelProps = React.useCallback((props = {}, ref = null) => ({ ...props,
    ref,
    role: "region",
    id: panelId,
    "aria-labelledby": buttonId,
    hidden: !isOpen
  }), [buttonId, isOpen, panelId]);
  return {
    isOpen,
    isDisabled,
    isFocusable,
    onOpen,
    onClose,
    getButtonProps,
    getPanelProps,
    htmlProps
  };
}

/* -------------------------------------------------------------------------------------------------
 * Validate accordion and accordion item props, and emit warnings.
 * -----------------------------------------------------------------------------------------------*/
function allowMultipleWarning(props) {
  const index = props.index || props.defaultIndex;
  const condition = !utils.isUndefined(index) && !utils.isArray(index) && props.allowMultiple;
  utils.warn({
    condition: !!condition,
    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`
  });
}

function allowMultipleAndAllowToggleWarning(props) {
  utils.warn({
    condition: !!(props.allowMultiple && props.allowToggle),
    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`
  });
}

function focusableNotDisabledWarning(props) {
  utils.warn({
    condition: !!(props.isFocusable && !props.isDisabled),
    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.
    `
  });
}

function warnIfOpenAndDisabled(props) {
  utils.warn({
    condition: props.isOpen && !!props.isDisabled,
    message: "Cannot open a disabled accordion item"
  });
}

/* -------------------------------------------------------------------------------------------------
 * Accordion - The wrapper that provides context for all accordion items
 * -----------------------------------------------------------------------------------------------*/

/**
 * The wrapper that provides context and focus management
 * for all accordion items.
 *
 * It wraps all accordion items in a `div` for better grouping.
 * @see Docs https://chakra-ui.com/accordion
 */
const Accordion = /*#__PURE__*/system.forwardRef(({
  children,
  reduceMotion,
  ...props
}, ref) => {
  const styles = system.useMultiStyleConfig("Accordion", props);
  const ownProps = system.omitThemingProps(props);
  const {
    htmlProps,
    descendants,
    ...context
  } = useAccordion(ownProps);
  const ctx = React__namespace.useMemo(() => ({ ...context,
    reduceMotion: !!reduceMotion
  }), [context, reduceMotion]);
  return /*#__PURE__*/React__namespace.createElement(AccordionDescendantsProvider, {
    value: descendants
  }, /*#__PURE__*/React__namespace.createElement(AccordionProvider, {
    value: ctx
  }, /*#__PURE__*/React__namespace.createElement(system.StylesProvider, {
    value: styles
  }, /*#__PURE__*/React__namespace.createElement(system.chakra.div, _extends({
    ref: ref
  }, htmlProps, {
    className: utils.cx("chakra-accordion", props.className)
  }), children))));
});

if (utils.__DEV__) {
  Accordion.displayName = "Accordion";
}
/* -------------------------------------------------------------------------------------------------
 * Accordion Item
 * -----------------------------------------------------------------------------------------------*/


const [AccordionItemProvider, useAccordionItemContext] = reactUtils.createContext({
  name: "AccordionItemContext",
  errorMessage: "useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` "
});

/**
 * AccordionItem is a single accordion that provides the open-close
 * behavior when the accordion button is clicked.
 *
 * It also provides context for the accordion button and panel.
 */
const AccordionItem = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    children,
    className
  } = props;
  const {
    htmlProps,
    ...context
  } = useAccordionItem(props);
  const styles = system.useStyles();
  const containerStyles = { ...styles.container,
    overflowAnchor: "none"
  };
  const ctx = React__namespace.useMemo(() => context, [context]);
  return /*#__PURE__*/React__namespace.createElement(AccordionItemProvider, {
    value: ctx
  }, /*#__PURE__*/React__namespace.createElement(system.chakra.div, _extends({
    ref: ref
  }, htmlProps, {
    className: utils.cx("chakra-accordion__item", className),
    __css: containerStyles
  }), utils.runIfFn(children, {
    isExpanded: !!context.isOpen,
    isDisabled: !!context.isDisabled
  })));
});

if (utils.__DEV__) {
  AccordionItem.displayName = "AccordionItem";
}
/**
 * React hook to get the state and actions of an accordion item
 */


function useAccordionItemState() {
  const {
    isOpen,
    isDisabled,
    onClose,
    onOpen
  } = useAccordionItemContext();
  return {
    isOpen,
    onClose,
    isDisabled,
    onOpen
  };
}
/* -------------------------------------------------------------------------------------------------
 * Accordion Item => Button
 * -----------------------------------------------------------------------------------------------*/

/**
 * AccordionButton is used expands and collapses an accordion item.
 * It must be a child of `AccordionItem`.
 *
 * Note 🚨: Each accordion button must be wrapped in an heading tag,
 * that is appropriate for the information architecture of the page.
 */
const AccordionButton = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    getButtonProps
  } = useAccordionItemContext();
  const buttonProps = getButtonProps(props, ref);
  const styles = system.useStyles();
  const buttonStyles = {
    display: "flex",
    alignItems: "center",
    width: "100%",
    outline: 0,
    ...styles.button
  };
  return /*#__PURE__*/React__namespace.createElement(system.chakra.button, _extends({}, buttonProps, {
    className: utils.cx("chakra-accordion__button", props.className),
    __css: buttonStyles
  }));
});

if (utils.__DEV__) {
  AccordionButton.displayName = "AccordionButton";
}
/* -------------------------------------------------------------------------------------------------
 * Accordion Item => Panel
 * -----------------------------------------------------------------------------------------------*/


/**
 * Accordion panel that holds the content for each accordion.
 * It shows and hides based on the state login from the `AccordionItem`.
 *
 * It uses the `Collapse` component to animate its height.
 */
const AccordionPanel = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    reduceMotion
  } = useAccordionContext();
  const {
    getPanelProps,
    isOpen
  } = useAccordionItemContext(); // remove `hidden` prop, 'coz we're using height animation

  const panelProps = getPanelProps(props, ref);

  const _className = utils.cx("chakra-accordion__panel", props.className);

  const styles = system.useStyles();

  if (!reduceMotion) {
    delete panelProps.hidden;
  }

  const child = /*#__PURE__*/React__namespace.createElement(system.chakra.div, _extends({}, panelProps, {
    __css: styles.panel,
    className: _className
  }));

  if (!reduceMotion) {
    return /*#__PURE__*/React__namespace.createElement(transition.Collapse, {
      in: isOpen
    }, child);
  }

  return child;
});

if (utils.__DEV__) {
  AccordionPanel.displayName = "AccordionPanel";
}
/* -------------------------------------------------------------------------------------------------
 * Accordion Item => Icon
 * -----------------------------------------------------------------------------------------------*/

/**
 * AccordionIcon that gives a visual cue of the open/close state of the accordion item.
 * It rotates `180deg` based on the open/close state.
 */


const AccordionIcon = props => {
  const {
    isOpen,
    isDisabled
  } = useAccordionItemContext();
  const {
    reduceMotion
  } = useAccordionContext();

  const _className = utils.cx("chakra-accordion__icon", props.className);

  const styles = system.useStyles();
  const iconStyles = {
    opacity: isDisabled ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : undefined,
    transition: reduceMotion ? undefined : "transform 0.2s",
    transformOrigin: "center",
    ...styles.icon
  };
  return /*#__PURE__*/React__namespace.createElement(icon.Icon, _extends({
    viewBox: "0 0 24 24",
    "aria-hidden": true,
    className: _className,
    __css: iconStyles
  }, props), /*#__PURE__*/React__namespace.createElement("path", {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }));
};

if (utils.__DEV__) {
  AccordionIcon.displayName = "AccordionIcon";
}

exports.Accordion = Accordion;
exports.AccordionButton = AccordionButton;
exports.AccordionDescendantsProvider = AccordionDescendantsProvider;
exports.AccordionIcon = AccordionIcon;
exports.AccordionItem = AccordionItem;
exports.AccordionPanel = AccordionPanel;
exports.AccordionProvider = AccordionProvider;
exports.useAccordion = useAccordion;
exports.useAccordionContext = useAccordionContext;
exports.useAccordionDescendant = useAccordionDescendant;
exports.useAccordionDescendants = useAccordionDescendants;
exports.useAccordionDescendantsContext = useAccordionDescendantsContext;
exports.useAccordionItem = useAccordionItem;
exports.useAccordionItemState = useAccordionItemState;

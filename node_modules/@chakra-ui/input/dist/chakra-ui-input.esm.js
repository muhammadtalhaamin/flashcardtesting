import { useFormControl } from '@chakra-ui/form-control';
import { forwardRef, useMultiStyleConfig, omitThemingProps, chakra, useStyles, StylesProvider } from '@chakra-ui/system';
import { cx, __DEV__ } from '@chakra-ui/utils';
import * as React from 'react';
import { getValidChildren } from '@chakra-ui/react-utils';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/**
 * Input
 *
 * Element that allows users enter single valued data.
 */
const Input = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Input", props);
  const ownProps = omitThemingProps(props);
  const input = useFormControl(ownProps);

  const _className = cx("chakra-input", props.className);

  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {
    __css: styles.field,
    ref: ref,
    className: _className
  }));
});

if (__DEV__) {
  Input.displayName = "Input";
} // This is used in `input-group.tsx`


Input.id = "Input";

const placements = {
  left: {
    marginEnd: "-1px",
    borderEndRadius: 0,
    borderEndColor: "transparent"
  },
  right: {
    marginStart: "-1px",
    borderStartRadius: 0,
    borderStartColor: "transparent"
  }
};
const StyledAddon = chakra("div", {
  baseStyle: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  }
});

/**
 * InputAddon
 *
 * Element to append or prepend to an input
 */
const InputAddon = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    placement = "left",
    ...rest
  } = props;
  const placementStyles = placements[placement] ?? {};
  const styles = useStyles();
  return /*#__PURE__*/React.createElement(StyledAddon, _extends({
    ref: ref
  }, rest, {
    __css: { ...styles.addon,
      ...placementStyles
    }
  }));
});

if (__DEV__) {
  InputAddon.displayName = "InputAddon";
}
/**
 * InputLeftAddon
 *
 * Element to append to the left of an input
 */


const InputLeftAddon = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InputAddon, _extends({
  ref: ref,
  placement: "left"
}, props, {
  className: cx("chakra-input__left-addon", props.className)
})));

if (__DEV__) {
  InputLeftAddon.displayName = "InputLeftAddon";
} // This is used in `input-group.tsx`


InputLeftAddon.id = "InputLeftAddon";
/**
 * InputRightAddon
 *
 * Element to append to the right of an input
 */

const InputRightAddon = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InputAddon, _extends({
  ref: ref,
  placement: "right"
}, props, {
  className: cx("chakra-input__right-addon", props.className)
})));

if (__DEV__) {
  InputRightAddon.displayName = "InputRightAddon";
} // This is used in `input-group.tsx`


InputRightAddon.id = "InputRightAddon";

const InputGroup = /*#__PURE__*/forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Input", props);
  const {
    children,
    className,
    ...rest
  } = omitThemingProps(props);

  const _className = cx("chakra-input__group", className);

  const groupStyles = {};
  const validChildren = getValidChildren(children);
  const input = styles.field;
  validChildren.forEach(child => {
    if (!styles) return;

    if (input && child.type.id === "InputLeftElement") {
      groupStyles.paddingStart = input.height ?? input.h;
    }

    if (input && child.type.id === "InputRightElement") {
      groupStyles.paddingEnd = input.height ?? input.h;
    }

    if (child.type.id === "InputRightAddon") {
      groupStyles.borderEndRadius = 0;
    }

    if (child.type.id === "InputLeftAddon") {
      groupStyles.borderStartRadius = 0;
    }
  });
  const clones = validChildren.map(child => {
    /**
     * Make it possible to override the size and variant from `Input`
     */
    const theming = {
      size: child.props?.size || props.size,
      variant: child.props?.variant || props.variant
    };
    return child.type.id !== "Input" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, Object.assign(theming, groupStyles, child.props));
  });
  return /*#__PURE__*/React.createElement(chakra.div, _extends({
    className: _className,
    ref: ref,
    __css: {
      width: "100%",
      display: "flex",
      position: "relative"
    }
  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {
    value: styles
  }, clones));
});

if (__DEV__) {
  InputGroup.displayName = "InputGroup";
}

const StyledElement = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "0",
    zIndex: 2
  }
});
const InputElement = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    placement = "left",
    ...rest
  } = props;
  const styles = useStyles();
  const input = styles.field;
  const attr = placement === "left" ? "insetStart" : "insetEnd";
  const elementStyles = {
    [attr]: "0",
    width: input?.height ?? input?.h,
    height: input?.height ?? input?.h,
    fontSize: input?.fontSize
  };
  return /*#__PURE__*/React.createElement(StyledElement, _extends({
    ref: ref,
    __css: elementStyles
  }, rest));
}); // This is used in `input-group.tsx`

InputElement.id = "InputElement";

if (__DEV__) {
  InputElement.displayName = "InputElement";
}

const InputLeftElement = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    ...rest
  } = props;

  const _className = cx("chakra-input__left-element", className);

  return /*#__PURE__*/React.createElement(InputElement, _extends({
    ref: ref,
    placement: "left",
    className: _className
  }, rest));
}); // This is used in `input-group.tsx`

InputLeftElement.id = "InputLeftElement";

if (__DEV__) {
  InputLeftElement.displayName = "InputLeftElement";
}

const InputRightElement = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    ...rest
  } = props;

  const _className = cx("chakra-input__right-element", className);

  return /*#__PURE__*/React.createElement(InputElement, _extends({
    ref: ref,
    placement: "right",
    className: _className
  }, rest));
}); // This is used in `input-group.tsx`

InputRightElement.id = "InputRightElement";

if (__DEV__) {
  InputRightElement.displayName = "InputRightElement";
}

export { Input, InputAddon, InputGroup, InputLeftAddon, InputLeftElement, InputRightAddon, InputRightElement };

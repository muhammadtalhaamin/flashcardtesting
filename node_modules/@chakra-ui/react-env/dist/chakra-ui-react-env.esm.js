import { __DEV__, isBrowser } from '@chakra-ui/utils';
import React, { useContext, useState, useMemo, createContext } from 'react';

const doc = {
  body: {
    classList: {
      add() {},

      remove() {}

    }
  },

  addEventListener() {},

  removeEventListener() {},

  activeElement: {
    blur() {},

    nodeName: ""
  },

  querySelector() {
    return null;
  },

  querySelectorAll() {
    return [];
  },

  getElementById() {
    return null;
  },

  createEvent() {
    return {
      initEvent() {}

    };
  },

  createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},

      setAttribute() {},

      getElementsByTagName() {
        return [];
      }

    };
  }

};
const ssrDocument = doc;

const noop = () => {};

const win = {
  document: ssrDocument,
  navigator: {
    userAgent: ""
  },
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener: noop,
  removeEventListener: noop,

  getComputedStyle() {
    return {
      getPropertyValue() {
        return "";
      }

    };
  },

  matchMedia() {
    return {
      matches: false,
      addListener: noop,
      removeListener: noop
    };
  },

  requestAnimationFrame(callback) {
    if (typeof setTimeout === "undefined") {
      callback();
      return null;
    }

    return setTimeout(callback, 0);
  },

  cancelAnimationFrame(id) {
    if (typeof setTimeout === "undefined") return;
    clearTimeout(id);
  },

  setTimeout: () => 0,
  clearTimeout: noop,
  setInterval: () => 0,
  clearInterval: noop
};
const ssrWindow = win;

const mockEnv = {
  window: ssrWindow,
  document: ssrDocument
};
const defaultEnv = isBrowser ? {
  window,
  document
} : mockEnv;
const EnvironmentContext = /*#__PURE__*/createContext(defaultEnv);

if (__DEV__) {
  EnvironmentContext.displayName = "EnvironmentContext";
}

function useEnvironment() {
  return useContext(EnvironmentContext);
}
function EnvironmentProvider(props) {
  const {
    children,
    environment: environmentProp
  } = props;
  const [node, setNode] = useState(null);
  const context = useMemo(() => {
    const doc = node?.ownerDocument;
    const win = node?.ownerDocument.defaultView;
    const nodeEnv = doc ? {
      document: doc,
      window: win
    } : undefined;
    const env = environmentProp ?? nodeEnv ?? defaultEnv;
    return env;
  }, [node, environmentProp]);
  const showEnvGetter = !node && !environmentProp;
  return /*#__PURE__*/React.createElement(EnvironmentContext.Provider, {
    value: context
  }, children, showEnvGetter && /*#__PURE__*/React.createElement("span", {
    ref: el => {
      if (el) setNode(el);
    }
  }));
}

if (__DEV__) {
  EnvironmentProvider.displayName = "EnvironmentProvider";
}

export { EnvironmentProvider, useEnvironment };

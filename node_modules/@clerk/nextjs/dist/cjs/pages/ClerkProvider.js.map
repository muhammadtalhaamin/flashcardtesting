{"version":3,"sources":["../../../src/pages/ClerkProvider.tsx"],"sourcesContent":["import { ClerkProvider as ReactClerkProvider } from '@clerk/clerk-react';\n// Override Clerk React error thrower to show that errors come from @clerk/nextjs\nimport { setClerkJsLoadingErrorPackageName, setErrorThrowerOptions } from '@clerk/clerk-react/internal';\nimport type { ClerkHostRouter } from '@clerk/shared/router';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport { useSafeLayoutEffect } from '../client-boundary/hooks/useSafeLayoutEffect';\nimport { ClerkNextOptionsProvider } from '../client-boundary/NextOptionsContext';\nimport type { NextClerkProviderProps } from '../types';\nimport { ClerkJSScript } from '../utils/clerk-js-script';\nimport { invalidateNextRouterCache } from '../utils/invalidateNextRouterCache';\nimport { mergeNextClerkPropsWithEnv } from '../utils/mergeNextClerkPropsWithEnv';\nimport { removeBasePath } from '../utils/removeBasePath';\n\nsetErrorThrowerOptions({ packageName: PACKAGE_NAME });\nsetClerkJsLoadingErrorPackageName(PACKAGE_NAME);\n\n// The version that Next added support for the window.history.pushState and replaceState APIs.\n// ref: https://nextjs.org/blog/next-14-1#windowhistorypushstate-and-windowhistoryreplacestate\nconst NEXT_WINDOW_HISTORY_SUPPORT_VERSION = '14.1.0';\n\n/**\n * Clerk router integration with Next.js's router.\n */\nconst useNextRouter = (): ClerkHostRouter => {\n  const router = useRouter();\n\n  // The window.history APIs seem to prevent Next.js from triggering a full page re-render, allowing us to\n  // preserve internal state between steps.\n  const canUseWindowHistoryAPIs =\n    typeof window !== 'undefined' && window.next && window.next.version >= NEXT_WINDOW_HISTORY_SUPPORT_VERSION;\n\n  return {\n    mode: 'path',\n    name: 'NextRouter',\n    push: (path: string) => router.push(path),\n    replace: (path: string) =>\n      canUseWindowHistoryAPIs ? window.history.replaceState(null, '', path) : router.replace(path),\n    shallowPush(path: string) {\n      canUseWindowHistoryAPIs ? window.history.pushState(null, '', path) : router.push(path, {});\n    },\n    pathname: () => window.location.pathname,\n    searchParams: () => new URLSearchParams(window.location.search),\n  };\n};\n\nexport function ClerkProvider({ children, ...props }: NextClerkProviderProps): JSX.Element {\n  const { __unstable_invokeMiddlewareOnAuthStateChange = true } = props;\n  const { push, replace } = useRouter();\n  const clerkRouter = useNextRouter();\n  ReactClerkProvider.displayName = 'ReactClerkProvider';\n\n  useSafeLayoutEffect(() => {\n    window.__unstable__onBeforeSetActive = invalidateNextRouterCache;\n  }, []);\n\n  useSafeLayoutEffect(() => {\n    window.__unstable__onAfterSetActive = () => {\n      // Re-run the middleware every time there auth state changes.\n      // This enables complete control from a centralised place (NextJS middleware),\n      // as we will invoke it every time the client-side auth state changes, eg: signing-out, switching orgs, etc.\\\n      if (__unstable_invokeMiddlewareOnAuthStateChange) {\n        void push(window.location.href);\n      }\n    };\n  }, []);\n\n  const navigate = (to: string) => push(removeBasePath(to));\n  const replaceNavigate = (to: string) => replace(removeBasePath(to));\n  const mergedProps = mergeNextClerkPropsWithEnv({\n    ...props,\n    __experimental_router: clerkRouter,\n    routerPush: navigate,\n    routerReplace: replaceNavigate,\n  });\n  // ClerkProvider automatically injects __clerk_ssr_state\n  // getAuth returns a user-facing authServerSideProps that hides __clerk_ssr_state\n  // @ts-expect-error initialState is hidden from the types as it's a private prop\n  const initialState = props.authServerSideProps?.__clerk_ssr_state || props.__clerk_ssr_state;\n\n  return (\n    <ClerkNextOptionsProvider options={mergedProps}>\n      <ReactClerkProvider\n        {...mergedProps}\n        initialState={initialState}\n      >\n        <ClerkJSScript router='pages' />\n        {children}\n      </ReactClerkProvider>\n    </ClerkNextOptionsProvider>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoD;AAEpD,sBAA0E;AAE1E,oBAA0B;AAC1B,mBAAkB;AAElB,iCAAoC;AACpC,gCAAyC;AAEzC,6BAA8B;AAC9B,uCAA0C;AAC1C,wCAA2C;AAC3C,4BAA+B;AAAA,IAE/B,wCAAuB,EAAE,aAAa,gBAAa,CAAC;AAAA,IACpD,mDAAkC,eAAY;AAI9C,MAAM,sCAAsC;AAK5C,MAAM,gBAAgB,MAAuB;AAC3C,QAAM,aAAS,yBAAU;AAIzB,QAAM,0BACJ,OAAO,WAAW,eAAe,OAAO,QAAQ,OAAO,KAAK,WAAW;AAEzE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM,CAAC,SAAiB,OAAO,KAAK,IAAI;AAAA,IACxC,SAAS,CAAC,SACR,0BAA0B,OAAO,QAAQ,aAAa,MAAM,IAAI,IAAI,IAAI,OAAO,QAAQ,IAAI;AAAA,IAC7F,YAAY,MAAc;AACxB,gCAA0B,OAAO,QAAQ,UAAU,MAAM,IAAI,IAAI,IAAI,OAAO,KAAK,MAAM,CAAC,CAAC;AAAA,IAC3F;AAAA,IACA,UAAU,MAAM,OAAO,SAAS;AAAA,IAChC,cAAc,MAAM,IAAI,gBAAgB,OAAO,SAAS,MAAM;AAAA,EAChE;AACF;AAEO,SAAS,cAAc,EAAE,UAAU,GAAG,MAAM,GAAwC;AA/C3F;AAgDE,QAAM,EAAE,+CAA+C,KAAK,IAAI;AAChE,QAAM,EAAE,MAAM,QAAQ,QAAI,yBAAU;AACpC,QAAM,cAAc,cAAc;AAClC,qBAAAA,cAAmB,cAAc;AAEjC,sDAAoB,MAAM;AACxB,WAAO,gCAAgC;AAAA,EACzC,GAAG,CAAC,CAAC;AAEL,sDAAoB,MAAM;AACxB,WAAO,+BAA+B,MAAM;AAI1C,UAAI,8CAA8C;AAChD,aAAK,KAAK,OAAO,SAAS,IAAI;AAAA,MAChC;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,WAAW,CAAC,OAAe,SAAK,sCAAe,EAAE,CAAC;AACxD,QAAM,kBAAkB,CAAC,OAAe,YAAQ,sCAAe,EAAE,CAAC;AAClE,QAAM,kBAAc,8DAA2B;AAAA,IAC7C,GAAG;AAAA,IACH,uBAAuB;AAAA,IACvB,YAAY;AAAA,IACZ,eAAe;AAAA,EACjB,CAAC;AAID,QAAM,iBAAe,WAAM,wBAAN,mBAA2B,sBAAqB,MAAM;AAE3E,SACE,6BAAAC,QAAA,cAAC,sDAAyB,SAAS,eACjC,6BAAAA,QAAA;AAAA,IAAC,mBAAAD;AAAA,IAAA;AAAA,MACE,GAAG;AAAA,MACJ;AAAA;AAAA,IAEA,6BAAAC,QAAA,cAAC,wCAAc,QAAO,SAAQ;AAAA,IAC7B;AAAA,EACH,CACF;AAEJ;","names":["ReactClerkProvider","React"]}
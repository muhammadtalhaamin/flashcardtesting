{"version":3,"sources":["../../../../src/app-router/server/ClerkProvider.tsx"],"sourcesContent":["import type { AuthObject } from '@clerk/backend';\nimport type { InitialState, Without } from '@clerk/types';\nimport { headers } from 'next/headers';\nimport React from 'react';\n\nimport { PromisifiedAuthProvider } from '../../client-boundary/PromisifiedAuthProvider';\nimport { getDynamicAuthData } from '../../server/buildClerkProps';\nimport type { NextClerkProviderProps } from '../../types';\nimport { mergeNextClerkPropsWithEnv } from '../../utils/mergeNextClerkPropsWithEnv';\nimport { ClientClerkProvider } from '../client/ClerkProvider';\nimport { buildRequestLike, getScriptNonceFromHeader } from './utils';\n\nconst getDynamicClerkState = React.cache(async function getDynamicClerkState() {\n  const request = await buildRequestLike();\n  const data = getDynamicAuthData(request);\n\n  return data;\n});\n\nconst getNonceFromCSPHeader = React.cache(async function getNonceFromCSPHeader() {\n  return getScriptNonceFromHeader((await headers()).get('Content-Security-Policy') || '') || '';\n});\n\nexport async function ClerkProvider(\n  props: Without<NextClerkProviderProps, '__unstable_invokeMiddlewareOnAuthStateChange'>,\n) {\n  const { children, dynamic, ...rest } = props;\n  let statePromise: Promise<null | AuthObject> = Promise.resolve(null);\n  let nonce = Promise.resolve('');\n\n  if (dynamic) {\n    statePromise = getDynamicClerkState();\n    nonce = getNonceFromCSPHeader();\n  }\n\n  const output = (\n    <ClientClerkProvider\n      {...mergeNextClerkPropsWithEnv(rest)}\n      nonce={await nonce}\n      initialState={await statePromise}\n    >\n      {children}\n    </ClientClerkProvider>\n  );\n\n  if (dynamic) {\n    return (\n      // TODO: fix types so AuthObject is compatible with InitialState\n      <PromisifiedAuthProvider authPromise={statePromise as unknown as Promise<InitialState>}>\n        {output}\n      </PromisifiedAuthProvider>\n    );\n  }\n\n  return output;\n}\n"],"mappings":"AAEA,SAAS,eAAe;AACxB,OAAO,WAAW;AAElB,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AAEnC,SAAS,kCAAkC;AAC3C,SAAS,2BAA2B;AACpC,SAAS,kBAAkB,gCAAgC;AAE3D,MAAM,uBAAuB,MAAM,MAAM,eAAeA,wBAAuB;AAC7E,QAAM,UAAU,MAAM,iBAAiB;AACvC,QAAM,OAAO,mBAAmB,OAAO;AAEvC,SAAO;AACT,CAAC;AAED,MAAM,wBAAwB,MAAM,MAAM,eAAeC,yBAAwB;AAC/E,SAAO,0BAA0B,MAAM,QAAQ,GAAG,IAAI,yBAAyB,KAAK,EAAE,KAAK;AAC7F,CAAC;AAED,eAAsB,cACpB,OACA;AACA,QAAM,EAAE,UAAU,SAAS,GAAG,KAAK,IAAI;AACvC,MAAI,eAA2C,QAAQ,QAAQ,IAAI;AACnE,MAAI,QAAQ,QAAQ,QAAQ,EAAE;AAE9B,MAAI,SAAS;AACX,mBAAe,qBAAqB;AACpC,YAAQ,sBAAsB;AAAA,EAChC;AAEA,QAAM,SACJ;AAAA,IAAC;AAAA;AAAA,MACE,GAAG,2BAA2B,IAAI;AAAA,MACnC,OAAO,MAAM;AAAA,MACb,cAAc,MAAM;AAAA;AAAA,IAEnB;AAAA,EACH;AAGF,MAAI,SAAS;AACX;AAAA;AAAA,MAEE,oCAAC,2BAAwB,aAAa,gBACnC,MACH;AAAA;AAAA,EAEJ;AAEA,SAAO;AACT;","names":["getDynamicClerkState","getNonceFromCSPHeader"]}
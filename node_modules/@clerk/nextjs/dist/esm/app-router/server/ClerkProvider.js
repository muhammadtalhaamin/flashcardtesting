import { headers } from "next/headers";
import React from "react";
import { PromisifiedAuthProvider } from "../../client-boundary/PromisifiedAuthProvider";
import { getDynamicAuthData } from "../../server/buildClerkProps";
import { mergeNextClerkPropsWithEnv } from "../../utils/mergeNextClerkPropsWithEnv";
import { ClientClerkProvider } from "../client/ClerkProvider";
import { buildRequestLike, getScriptNonceFromHeader } from "./utils";
const getDynamicClerkState = React.cache(async function getDynamicClerkState2() {
  const request = await buildRequestLike();
  const data = getDynamicAuthData(request);
  return data;
});
const getNonceFromCSPHeader = React.cache(async function getNonceFromCSPHeader2() {
  return getScriptNonceFromHeader((await headers()).get("Content-Security-Policy") || "") || "";
});
async function ClerkProvider(props) {
  const { children, dynamic, ...rest } = props;
  let statePromise = Promise.resolve(null);
  let nonce = Promise.resolve("");
  if (dynamic) {
    statePromise = getDynamicClerkState();
    nonce = getNonceFromCSPHeader();
  }
  const output = /* @__PURE__ */ React.createElement(
    ClientClerkProvider,
    {
      ...mergeNextClerkPropsWithEnv(rest),
      nonce: await nonce,
      initialState: await statePromise
    },
    children
  );
  if (dynamic) {
    return (
      // TODO: fix types so AuthObject is compatible with InitialState
      /* @__PURE__ */ React.createElement(PromisifiedAuthProvider, { authPromise: statePromise }, output)
    );
  }
  return output;
}
export {
  ClerkProvider
};
//# sourceMappingURL=ClerkProvider.js.map